import requests
import json

# URL base de la aplicaci√≥n (ajustar si usas otro puerto)
BASE_URL = "http://localhost:5000"

def test_health_check():
    """Test del health check b√°sico"""
    print("üîç Probando health check...")
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check OK: {data['message']}")
            return True
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en health check: {e}")
        return False

def test_database_connection():
    """Test de conexi√≥n a la base de datos"""
    print("üîç Probando conexi√≥n a base de datos...")
    try:
        response = requests.get(f"{BASE_URL}/test-db")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Base de datos OK: {data['message']}")
            return True
        else:
            print(f"‚ùå Test BD fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en test BD: {e}")
        return False

def test_productos_categorias():
    """Test de consulta de productos por categor√≠a"""
    print("üîç Probando consulta de productos...")
    categorias = ['pan_salado', 'pan_dulce', 'pan_semidulce', 'pasteles', 'bocaditos']
    
    for categoria in categorias:
        try:
            response = requests.get(f"{BASE_URL}/productos/{categoria}")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ {categoria}: {len(data['productos'])} productos encontrados")
            else:
                print(f"‚ùå Error en {categoria}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Error consultando {categoria}: {e}")

def test_webhook_dialogflow():
    """Test del webhook con un request simulado de Dialogflow"""
    print("üîç Probando webhook de Dialogflow...")
    
    # Simular request de Dialogflow para consultar productos
    webhook_data = {
        "queryResult": {
            "intent": {
                "displayName": "consultar.productos.categoria"
            },
            "parameters": {
                "categoria": "pan_dulce"
            },
            "queryText": "quiero ver pan dulce"
        }
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/webhook",
            json=webhook_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Webhook OK - Respuesta: {data.get('fulfillmentText', '')[:100]}...")
            return True
        else:
            print(f"‚ùå Webhook fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en webhook: {e}")
        return False

def test_webhook_sin_categoria():
    """Test del webhook sin categor√≠a espec√≠fica"""
    print("üîç Probando webhook sin categor√≠a...")
    
    webhook_data = {
        "queryResult": {
            "intent": {
                "displayName": "consultar.productos.categoria"
            },
            "parameters": {},
            "queryText": "ver productos"
        }
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/webhook",
            json=webhook_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Webhook categor√≠as OK - Respuesta: {data.get('fulfillmentText', '')[:100]}...")
            return True
        else:
            print(f"‚ùå Webhook categor√≠as fall√≥: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error en webhook categor√≠as: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas del Chatbot Panader√≠a Jos y Mar")
    print("=" * 60)
    
    # Ejecutar todas las pruebas
    tests_passed = 0
    total_tests = 5
    
    if test_health_check():
        tests_passed += 1
    
    print()
    if test_database_connection():
        tests_passed += 1
    
    print()
    test_productos_categorias()
    tests_passed += 1  # Asumimos que pasa si no hay errores cr√≠ticos
    
    print()
    if test_webhook_dialogflow():
        tests_passed += 1
    
    print()
    if test_webhook_sin_categoria():
        tests_passed += 1
    
    print("\n" + "=" * 60)
    print(f"üèÅ Resultado: {tests_passed}/{total_tests} pruebas pasaron")
    
    if tests_passed == total_tests:
        print("üéâ ¬°Todo funcionando perfectamente!")
        print("üìã Pr√≥ximos pasos:")
        print("   1. Subir c√≥digo a GitHub")
        print("   2. Desplegar en Railway")
        print("   3. Configurar Dialogflow")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisar errores arriba.")

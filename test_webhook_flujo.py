#!/usr/bin/env python3
"""
Script de prueba para verificar el flujo completo del webhook
con storage temporal por sesi√≥n
"""

import requests
import json
import time

# URL del webhook (ajustar si es necesario)
WEBHOOK_URL = "http://localhost:5000/webhook"

def test_request(intent_name, parameters, session_id="test-session-123", query_text=""):
    """Env√≠a una request simulada al webhook"""
    
    payload = {
        "queryResult": {
            "intent": {
                "displayName": intent_name
            },
            "parameters": parameters,
            "queryText": query_text
        },
        "session": f"projects/test-project/agent/sessions/{session_id}"
    }
    
    try:
        response = requests.post(WEBHOOK_URL, json=payload, timeout=10)
        result = response.json()
        print(f"\n{'='*60}")
        print(f"INTENT: {intent_name}")
        print(f"PARAMS: {parameters}")
        print(f"RESPONSE: {result.get('fulfillmentText', 'No response')}")
        print(f"STATUS: {response.status_code}")
        return result
    except Exception as e:
        print(f"ERROR enviando request para {intent_name}: {e}")
        return None

def test_flujo_completo():
    """Prueba el flujo completo de un pedido"""
    
    print("üöÄ INICIANDO PRUEBA DEL FLUJO COMPLETO DEL WEBHOOK")
    session_id = "test-session-" + str(int(time.time()))
    
    # 1. Consultar productos por categor√≠a
    print("\n1Ô∏è‚É£ Consultando productos de panes...")
    test_request("consultar.productos.categoria", 
                {"categoria_producto": "panes"}, 
                session_id, 
                "quiero ver panes")
    
    # 2. Agregar productos al pedido
    print("\n2Ô∏è‚É£ Agregando productos al pedido...")
    test_request("hacer.pedido.productos", 
                {"producto": ["pan franc√©s", "croissant"], "cantidad": [2, 3]}, 
                session_id, 
                "quiero 2 panes franc√©s y 3 croissant")
    
    # 3. Agregar nombre
    print("\n3Ô∏è‚É£ Agregando nombre...")
    test_request("hacer.pedido.nombre", 
                {"person": {"name": "Juan P√©rez"}}, 
                session_id, 
                "mi nombre es Juan P√©rez")
    
    # 4. Agregar fecha
    print("\n4Ô∏è‚É£ Agregando fecha...")
    test_request("hacer.pedido.fecha", 
                {"date": "2025-07-11"}, 
                session_id, 
                "para el 11 de julio")
    
    # 5. Tipo de entrega - delivery
    print("\n5Ô∏è‚É£ Seleccionando delivery...")
    test_request("hacer.pedido.delivery", 
                {"tipo_entrega": "delivery"}, 
                session_id, 
                "quiero delivery")
    
    # 6. Agregar direcci√≥n
    print("\n6Ô∏è‚É£ Agregando direcci√≥n...")
    test_request("hacer.pedido.direccion", 
                {"direccion": "Av. Los Olivos 123, San Isidro"}, 
                session_id, 
                "mi direcci√≥n es Av. Los Olivos 123, San Isidro")
    
    # 7. Agregar notas
    print("\n7Ô∏è‚É£ Agregando notas especiales...")
    test_request("hacer.pedido.nota", 
                {"notas": "Sin gluten por favor"}, 
                session_id, 
                "sin gluten por favor")
    
    # 8. Agregar tel√©fono
    print("\n8Ô∏è‚É£ Agregando tel√©fono...")
    test_request("hacer.pedido.telefono", 
                {"phone-number": "987654321"}, 
                session_id, 
                "mi tel√©fono es 987654321")
    
    # 9. Confirmar pedido
    print("\n9Ô∏è‚É£ Confirmando pedido...")
    test_request("hacer.pedido.confirmar", 
                {}, 
                session_id, 
                "s√≠ confirmo")
    
    print("\n‚úÖ PRUEBA COMPLETADA!")

def test_flujo_con_recojo():
    """Prueba un flujo alternativo con recojo en tienda"""
    
    print("\n\nüöÄ INICIANDO PRUEBA CON RECOJO EN TIENDA")
    session_id = "test-recojo-" + str(int(time.time()))
    
    # Productos
    test_request("hacer.pedido.productos", 
                {"producto": ["torta chocolate"], "cantidad": [1]}, 
                session_id, 
                "quiero 1 torta de chocolate")
    
    # Nombre
    test_request("hacer.pedido.nombre", 
                {"person": {"name": "Mar√≠a Gonz√°lez"}}, 
                session_id, 
                "soy Mar√≠a Gonz√°lez")
    
    # Fecha
    test_request("hacer.pedido.fecha", 
                {"date": "2025-07-12"}, 
                session_id, 
                "para ma√±ana")
    
    # Recojo
    test_request("hacer.pedido.recojo", 
                {"tipo_entrega": "recojo"}, 
                session_id, 
                "voy a recoger en tienda")
    
    # Tel√©fono
    test_request("hacer.pedido.telefono", 
                {"phone-number": "999888777"}, 
                session_id, 
                "mi n√∫mero es 999888777")
    
    # Confirmar
    test_request("hacer.pedido.confirmar", 
                {}, 
                session_id, 
                "confirmo el pedido")
    
    print("\n‚úÖ PRUEBA DE RECOJO COMPLETADA!")

if __name__ == "__main__":
    print("Esperando 2 segundos para que el servidor est√© listo...")
    time.sleep(2)
    
    try:
        # Verificar que el servidor est√© funcionando
        health_response = requests.get("http://localhost:5000/", timeout=5)
        if health_response.status_code == 200:
            print("‚úÖ Servidor webhook funcionando correctamente")
            
            # Ejecutar pruebas
            test_flujo_completo()
            test_flujo_con_recojo()
            
        else:
            print("‚ùå Servidor webhook no responde correctamente")
            
    except Exception as e:
        print(f"‚ùå Error conectando con el servidor: {e}")
        print("Aseg√∫rate de que el webhook est√© ejecut√°ndose en http://localhost:5000")
